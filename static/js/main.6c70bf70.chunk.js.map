{"version":3,"sources":["components/Header.js","components/Balance.js","components/AccountSummary.js","components/context/transReducer.js","components/context/globalContext.js","components/TransactionHistory.js","components/AddTransaction.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Balance","AccountSummary","TransactionReducer","state","action","type","payload","transactions","amount","desc","TransitionContext","createContext","TransactionProvider","children","useReducer","dispatch","Provider","value","transaction","addTransaction","transObj","TransactionHistory","useContext","AddTransaction","htmlFor","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8LAGaA,G,YAAS,WAClB,OACI,wBAAIC,UAAU,eAAd,yBCHKC,EAAU,WACnB,OACI,6BACI,+CACA,uCCJCC,EAAiB,WAC1B,OACI,yBAAKF,UAAU,oBAEP,qCACA,qCAOA,sCACA,uC,cCLDG,EAVe,SAACC,EAAOC,GAC9B,OAAOA,EAAOC,MACV,IAAI,kBACA,MAAM,CAAED,EAAOE,SAAf,mBAA2BH,IAE/B,QACI,OAAOA,ICHjBI,EAAe,CAEjB,CAAEC,OAAQ,IAAKC,KAAM,QACrB,CAAED,QAAS,IAAKC,KAAM,QACtB,CAAED,OAAQ,IAAMC,KAAM,WAIbC,EAAoBC,wBAAcJ,GAIlCK,EAAsB,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,SAAe,EAEtBC,qBAAWZ,EAAoBK,GAFT,mBAEzCJ,EAFyC,KAElCY,EAFkC,KAehD,OACI,kBAACL,EAAkBM,SAAnB,CAA4BC,MAAO,CAC/BC,YAAaf,EACbgB,eAdR,SAAwBC,GACpBL,EAAS,CACLV,KAAM,kBACNC,QAAS,CACLE,OAAQY,EAASZ,OACjBC,KAAMW,EAASX,WAclBI,ICjCAQ,EAAqB,WACXC,qBAAWZ,GAU9B,OACI,6BACI,kDAGI,wBAAIX,UAAU,uBCnBjBwB,EAAiB,WAC1B,OACI,6BACI,mDACA,0BAAMxB,UAAU,kBACZ,6BACI,2BAAOyB,QAAQ,eAAf,eAGA,2BAAOnB,KAAK,OAAOoB,YAAY,2BAEnC,6BACI,2BAAOD,QAAQ,eAAf,sBAGA,2BAAOnB,KAAK,SAASoB,YAAY,wBAErC,sDCODC,MAjBf,WACE,OACE,yBAAK3B,UAAU,aACb,kBAAC,EAAD,KACJ,kBAAC,EAAD,MACA,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,UCNgB4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.6c70bf70.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <h1 className='projectname'>\r\n            Expense Tracker App   \r\n        </h1>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\nexport const Balance = () => {\r\n    return (\r\n        <div >\r\n            <h4 >Current Balance</h4>\r\n            <h1>$0.00</h1>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport const AccountSummary = () => {\r\n    return (\r\n        <div className='expensecontainer'>\r\n            \r\n                <h4>Income\r\n                <p>$0.00</p> \r\n                </h4>\r\n                \r\n                   \r\n\r\n            \r\n            \r\n                <h4>Expense\r\n                <p>$0.00</p>   \r\n                </h4>\r\n            \r\n\r\n            </div>\r\n      \r\n    )\r\n}\r\n"," const TransactionReducer = ( (state, action)=>{\r\n        switch(action.type) {\r\n            case'ADD_TRANSACTION':{\r\n                return [action.payload, ...state]\r\n            }\r\n            default:\r\n                return state;\r\n        }\r\n});\r\n\r\nexport default TransactionReducer;","import React,  { createContext, useReducer } from 'react';\r\nimport TransactionReducer from './transReducer';\r\n\r\nconst transactions = [\r\n\r\n    { amount: 500, desc: 'cash' },\r\n    { amount: -400, desc: 'loan' },\r\n    { amount: 5000, desc: 'mobile' },\r\n]\r\n\r\n\r\nexport const TransitionContext = createContext(transactions);\r\n\r\n\r\n\r\nexport const TransactionProvider = ({children }) => {\r\n\r\n    const [state, dispatch] = useReducer(TransactionReducer, transactions);\r\n\r\n    function addTransaction(transObj) {\r\n        dispatch({\r\n            type: 'ADD_TRANSACTION',\r\n            payload: {\r\n                amount: transObj.amount,\r\n                desc: transObj.desc,\r\n\r\n            }\r\n\r\n        })\r\n    }\r\n    return (\r\n        <TransitionContext.Provider value={{\r\n            transaction: state,\r\n            addTransaction\r\n        }\r\n\r\n        }>\r\n\r\n            {children}\r\n        </TransitionContext.Provider>\r\n    )\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { TransitionContext } from './context/globalContext';\r\n\r\n\r\n\r\nexport const TransactionHistory = () => {\r\n    let transactions = useContext(TransitionContext);\r\n    // let [newDesc, setDesc] = useState(\"\");\r\n    // let [newAmount, setAmount] = useState(\"\");\r\n\r\n\r\n\r\n    const handleAddition = (event) => {\r\n        event.preventDefault()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                Transaction History\r\n                \r\n                <ul className='transactionlist'>\r\n                    {/* {transactions.map((obj, ind) => {\r\n                        return ( <li key={ind}>\r\n                                <span>{obj.desc}</span>\r\n                                <span>{obj.amount}</span>\r\n\r\n                            </li>\r\n\r\n                        )\r\n                    })\r\n\r\n                    } */}\r\n                    \r\n\r\n                </ul>\r\n            </h3>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport const AddTransaction = () => {\r\n    return (\r\n        <div>\r\n            <h3>Add New Transaction</h3>\r\n            <form className='transitionform'>\r\n                <div>\r\n                    <label htmlFor='description'>\r\n                        Description\r\n                    </label>\r\n                    <input type='text' placeholder='Detail of Description' />    \r\n                </div>\r\n                <div>\r\n                    <label htmlFor='transaction'>\r\n                        Transaction Amount\r\n                    </label>\r\n                    <input type='number' placeholder='Transaction Amount'/>\r\n                </div>\r\n                <button>Add Transaction</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport { Header } from './components/Header';\nimport { Balance } from './components/Balance';\nimport { AccountSummary } from './components/AccountSummary';\nimport { TransactionHistory } from './components/TransactionHistory';\nimport { AddTransaction } from './components/AddTransaction';\nimport {TransactionProvider} from './components/context/globalContext';\n\nfunction App() {\n  return (\n    <div className='container'>\n      <TransactionProvider>\n  <Header />\n  <div>\n    <Balance />\n    <AccountSummary />\n    <TransactionHistory />\n    <AddTransaction />\n    \n  </div>\n  </TransactionProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}